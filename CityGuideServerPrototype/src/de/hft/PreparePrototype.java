package de.hft;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class LoadRouteIndex
 */
@WebServlet("/PreparePrototype")
public class PreparePrototype extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public PreparePrototype() {
        super();
    }
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
    	response.setContentType("text/html;charset=UTF-8");
    	PrintWriter out = response.getWriter();
        
        try {
        	Database.executeUpdate("DROP TABLE IF EXISTS Mapping");
        	Database.executeUpdate("DROP TABLE IF EXISTS Routes");
        	Database.executeUpdate("DROP TABLE IF EXISTS PointsOfInterest");
        	
        	Database.executeUpdate("CREATE TABLE Routes (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY," +
        			"name CHAR(75) NOT NULL," +
        			"description CHAR(500) NOT NULL);");
        	Database.executeUpdate("CREATE TABLE PointsOfInterest (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY," +
        			"name CHAR(75) NOT NULL," +
        			"description CHAR(500) NOT NULL," +
        			"longitude DOUBLE," +
        			"latitude DOUBLE);");
        	Database.executeUpdate("CREATE TABLE Mapping (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY," +
        			"poiId INTEGER," +
        			"routeId INTEGER," +
        			"FOREIGN KEY(poiId) REFERENCES PointsOfInterest(id)," +
        			"FOREIGN KEY(routeId) REFERENCES Routes(id));");
        	
        	Database.executeUpdate("INSERT INTO Routes (name, description) VALUES('Mixed Tour', 'The mixed tour will guide you through the New Castle, the Stuttgart Central Station and the Mercedes-Benz Museum.');");
        	Database.executeUpdate("INSERT INTO PointsOfInterest (name, description, longitude, latitude) VALUES('New Castle', 'The New Castle is a building which stands on the south edge of Schlossplatz, the central square in Stuttgart. The castle is built in late Baroque style.', 48.77821, 9.181262);");
        	Database.executeUpdate("INSERT INTO PointsOfInterest (name, description, longitude, latitude) VALUES('Stuttgart Central Station', 'Stuttgart Central Station, short form: Stuttgart Hbf) is the Hauptbahnhof of the city of Stuttgart, the capital of the state of Baden-Württemberg. It is the largest regional and long-distance railway station in Stuttgart, the main node of the Stuttgart S-Bahn network, and, together with the halt at Charlottenplatz, the main node of the Stuttgart Stadtbahn.', 48.783399, 9.181736);");
        	Database.executeUpdate("INSERT INTO PointsOfInterest (name, description, longitude, latitude) VALUES('Mercedes-Benz Museum', 'The Mercedes-Benz Museum is an automotive museum housed in Stuttgart. Stuttgart is home to the Mercedes-Benz brand and the international headquarters of Daimler AG. The current building, which stands directly outside the main gate of the Daimler factory in Stuttgart-Untertürkheim, was designed by UN Studio.', 48.788392, 9.23403);");
        	
        	Database.executeUpdate("INSERT INTO Mapping (poiId, routeId) VALUES(1, 1);");
        	Database.executeUpdate("INSERT INTO Mapping (poiId, routeId) VALUES(2, 1);");
        	Database.executeUpdate("INSERT INTO Mapping (poiId, routeId) VALUES(3, 1);");
        	
            out.println("<p>Sample data prepared!</p>");
            out.println(
            		"<p>Now you can call the following servlets and html pages:</p><br />" +
            		"<a href=\"./LoadRouteIndex\">./LoadRouteIndex</a><br />This gives you an overview of all available tours, but only gives back ids and names of the routes.<br /><br />" +
            		"<a href=\"./LoadAllRoutes\">./LoadAllRoutes</a><br />This returns a list of all stored routes with full details.<br /><br />" +
            		"<a href=\"./LoadRouteById?id=1\">./LoadRouteById?id=1</a><br /> Use this if you want to load a particular route.<br /><br />" +
            		"<a href=\"./LoadPointOfInterestById?id=1\">./LoadPointOfInterestById?id=1</a><br /> It returns a single POI.<br /><br />" +
            		"<a href=\"./PresentPointOfInterestById.jsp?id=2\">./PresentPointOfInterestById.jsp?id=2</a><br /> This displays a html presentation of a single POI.");
            out.flush();
        } catch (ClassNotFoundException e) {
        	e.printStackTrace();
        } catch (SQLException e) {
        	out.print(e.getMessage());
        	e.printStackTrace();
        } finally {
        	Database.closeConnection();
            out.close();
        }
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

}